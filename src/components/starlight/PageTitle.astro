---
import Default from "@astrojs/starlight/components/PageTitle.astro";
let { synonyms = [] } = Astro.locals.starlightRoute.entry.data || {};


---



<Default><slot /></Default>
{
  synonyms.length > 0 && (
    <div style="margin-top: 1rem; display: flex; gap: 0.5rem; flex-wrap: wrap;">
      {synonyms.map((synonym: string) => (
        <span
          style="
                    background: #e0e0e0;
                    border-radius: 16px;
                    padding: 0.25em 0.75em;
                    font-size: 0.95em;
                    color: #333;
                    display: inline-block;
                    cursor: pointer;
                    data-synonym={synonym}
                "
        >
          {synonym}
        </span>
      ))}
    </div>
  )
}
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const synonymContainer = document.querySelector(
      'div[style*="display: flex;"]'
    ); // Select the container
    if (synonymContainer) {
      synonymContainer.addEventListener("click", (e) => {
        const target = e.target;
        console.log("Synonym clicked:", target?.textContent);
        openAndFillSearch(target?.textContent || "");
    });
    }
  });

    function openAndFillSearch(query: string) {
        const openModalButton = document.querySelector<HTMLButtonElement>(
            'site-search [data-open-modal]'
        );setTimeout(() => {
          if (openModalButton) {
            openModalButton.click();
          }
        }, 50); // Wait for 50 milliseconds
        
        if (!openModalButton) return;
        console.log("test")
        openModalButton.click();

        const input = document.querySelector<HTMLInputElement>('site-search input');
        if (!input) return;
        input.value = query;
        input.dispatchEvent(new InputEvent('input', { bubbles: true, cancelable: true }));
    }


</script>