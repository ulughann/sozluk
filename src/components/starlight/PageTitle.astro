---
import { Badge } from "@astrojs/starlight/components";

import Default from "@astrojs/starlight/components/PageTitle.astro";
let { synonyms = [] } = Astro.locals.starlightRoute.entry.data || {};
let { variants = [] } = Astro.locals.starlightRoute.entry.data || {};
let { description = "" } = Astro.locals.starlightRoute.entry.data || {};
let { type = "isim" } = Astro.locals.starlightRoute.entry.data || {};

let v = variants.toString().replace(/,/g, ", ");

// figure out if word is in pt, sozluk or ekler

const { slug } = Astro.locals.starlightRoute;
console.log(slug)

// if slug starts in /pt/
let word = "Öz Türkçe"
if (slug.startsWith("/pt/")) {
  word = "Ön Türkçe"
}



---
 
<div data-pagefind-filter="Sözlük" hidden>
  {word}
</div>

<div data-pagefind-filter="Sözcük çeşiti"hidden>
  {type}
</div>





<Default><slot /> </Default>
<p style="margin-top: 0.5rem; color: #666; font-size: 24px;">
  {description}
</p>

{
  synonyms.length > 0 && (
    <div style="margin-top: 1rem; display: flex; gap: 0.5rem; flex-wrap: wrap;">
      {synonyms.map((synonym: string) => (
        <span
          style="
                    background: #e0e0e0;
                    border-radius: 16px;
                    padding: 0.25em 0.75em;
                    font-size: 0.95em;
                    color: #333;
                    display: inline-block;
                    cursor: pointer;
                "
          data-synonym={synonym}
        >
          {synonym}
        </span>
      ))}
    </div>
  )
}

<p hidden> {v} </p>

</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("span[data-synonym]").forEach((span) => {
      span.addEventListener("click", (e) => {
        const target = e.currentTarget as HTMLElement;
        console.log("Synonym/Variant clicked:", target.dataset.synonym);
        openAndFillSearch(target.dataset.synonym || "");
      });
    });
  });

  function openAndFillSearch(query: string) {
    const openModalButton = document.querySelector<HTMLButtonElement>(
      "site-search [data-open-modal]"
    );
    setTimeout(() => {
      if (openModalButton) {
        openModalButton.click();
      }
    }, 50); // Wait for 50 milliseconds

    if (!openModalButton) return;
    openModalButton.click();

    const input = document.querySelector<HTMLInputElement>("site-search input");
    if (!input) return;
    input.value = query;
    input.dispatchEvent(
      new InputEvent("input", { bubbles: true, cancelable: true })
    );
  }
</script>
